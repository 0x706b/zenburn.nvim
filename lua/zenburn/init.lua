local lush = require('lush')
local hsl = lush.hsl

local colors = {
  bg = '#1f1f1f',
  bg0 = '#242424',
  bg1 = '#404040',
  bg2 = '#8f8f8f',
  fg = '#dcdccc',
  fg0 = '#ccccbc',
  fg1 = '#c3bf9f',
  fg2 = '#bca3a3',
  b = {
    red = '#dca3a3',
    yellow = '#ffd7a7',
    blue = '#8cb0d3'
  },
  n = {
    red = '#dca3a3',
    yellow = '#ffd7a7',
    blue = '#8cb0d3',
    green = '#88b090',
    magenta = '#bc8cbc'
  },
  git = {
    add = '#709080',
    change = '#8cb0d3',
    delete = '#ecbcbc'
  }
}

---@diagnostic disable: undefined-global
local theme = lush(function ()
  return {
    Normal { fg = hsl('#dcdccc') },
    Conceal { fg = hsl('#8f8f8f'), bg = hsl('#333333') },
    ColorColumn { bg = hsl('#33332f') },
    CursorLine { bg = hsl('#121212') },
    CursorLineNr { fg = hsl('#f2f3bb'), bg = hsl('#121212') },
    FoldColumn { fg = hsl('#93b3a3'), bg = hsl('#161616') },
    Folded { FoldColumn },
    LineNr { fg = hsl('#424242'), bg = hsl('#1b1b1b') },
    NonText { fg = hsl('#404040'), gui = 'bold' },
    Pmenu { bg = hsl('#242424'), fg = hsl('#ccccbc') },
    PmenuSel { bg = hsl('#353a37'), fg = hsl('#ccdc90'), gui = 'bold' },
    MatchParen { fg = hsl('#f8f893'), bg = hsl('#385f38'), gui = 'bold' },
    SignColumn { fg = hsl('#9fafaf'), gui = 'bold' },
    SpecialKey { fg = hsl('#9ece9e'), bg = hsl('#242424') },
    TabLine { fg = hsl('#88b090'), bg = hsl('#313633') },
    TabLineSel { fg = hsl('#ccd990'), bg = hsl('#222222') },
    TabLineFill { fg = hsl('#88b090'), bg = hsl('#313633') },
    Visual { bg = hsl('#304a3d') },
    VisualNOS { Visual },
    Error { fg = hsl('#e37170'), bg = hsl('#664040') },

    Boolean { fg = hsl('#dca3a3') },
    Character { fg = hsl('#dca3a3'), gui = 'bold' },
    Comment { fg = hsl('#7f9f7f'), gui = 'italic' },
    Conditional { fg = hsl('#f0dfaf'), gui = 'bold' },
    Constant { fg = hsl('#dca3a3'), gui = 'bold' },
    Cursor { fg = hsl('#000d18'), bg = hsl('#8faf9f'), gui = 'bold' },
    Debug { fg = hsl('#bca3a3'), gui = 'bold' },
    Define { fg = hsl('#ffcfaf'), gui = 'bold' },
    Delimiter { fg = hsl('#8f8f8f') },
    DiffAdd { fg = hsl('#709080'), bg = hsl('#313c36'), gui = 'bold' },
    DiffChange { bg = hsl('#333333') },
    DiffDelete { fg = hsl('#333333'), bg = hsl('#464646') },
    DiffText { fg = hsl('#ecbcbc'), bg = hsl('#41363c'), gui = 'bold' },
    Directory { fg = hsl('#9fafaf'), gui = 'bold' },
    ErrorMsg { fg = hsl('#80d4aa'), bg = hsl('#2f2f2f'), gui = 'bold' },
    Exception { fg = hsl('#c3bf9f'), gui = 'bold' },
    Float { fg = hsl('#c0bed1') },
    Function { fg = hsl('#efef8f') },
    Identifier { fg = hsl('#efdcbc') },
    IncSearch { fg = hsl('#f8f893'), bg = hsl('#385f38') },
    Keyword { fg = hsl('#f0dfaf'), gui = 'bold' },
    Macro { fg = hsl('#ffcfaf'), gui = 'bold' },
    ModeMsg { fg = hsl('#ffcfaf') },
    MoreMsg{ fg = hsl('#ffffff'), gui = 'bold' },
    Number { fg = hsl('#8cd0d3') },
    Operator { fg = hsl('#f0efd0') },
    PmenuSbar { fg = hsl('#000000'), bg = hsl('#2e3330') },
    PmenuThumb { fg = hsl('#040404'), bg = hsl('#a0afa0') },
    PreCondit { fg = hsl('#dfaf8f'), gui = 'bold' },
    PreProc { fg = hsl('#ffcfaf'), gui = 'bold' },
    Question { fg = hsl('#ffffff'), gui = 'bold' },
    Repeat { fg = hsl('#ffd7a7'), gui = 'bold' },
    Search { fg = hsl('#ffffe0'), bg = hsl('#284f28') },
    SpecialChar { fg = hsl('#dca3a3'), gui = 'bold' },
    SpecialComment { fg = hsl('#82a282'), gui = 'bold' },
    Special { fg = hsl('#cfbfaf') },
    Statement { fg = hsl('#e3ceab') },
    StatusLine { fg = hsl('#313633'), bg = hsl('#404040') },
    StatusLineNC { fg = hsl('#2e3330'), bg = hsl('#404040') },
    StorageClass { fg = hsl('#c3bf9f'), gui = 'bold' },
    String { fg = hsl('#cc9393') },
    Structure { fg = hsl('#efefaf'), gui = 'bold' },
    Tag { fg = hsl('#e89393'), gui = 'bold' },
    Title { fg = hsl('#efefef'), gui = 'bold' },
    Todo { fg = hsl('#dfdfdf'), gui = 'bold' },
    Typedef { fg = hsl('#dfe4cf'), gui = 'bold' },
    Type { fg = hsl('#dfdfbf'), gui = 'bold' },
    Underlined { gui = 'underline' },
    VertSplit { fg = hsl('#2e3330') },
    WarningMsg { fg = hsl('#ffffff'), bg = hsl('#333333'), gui = 'bold' },
    Warning { fg = hsl('#ffffff'), bg = hsl('#333333'), gui = 'bold' },
    WildMenu { fg = hsl('#cbecd0'), bg = hsl('#2c302d'), gui = 'underline' },
    SpellBad { fg = hsl('#dc8c6c'), sp = hsl('#bc6c4c') },
    SpellCap { sp = hsl('#6c6c9c'), fg = hsl('#8c8cbc') },
    SpellRare { fg = hsl('#bc8cbc'), sp = hsl('#bc6c9c') },
    SpellLocal { fg = hsl('#9ccc9c'), sp = hsl('#7cac7c') },

    Zenburn { lush = colors },

    CocHighlightText { Underlined },
    CocErrorHighlight { sp = Error.fg, gui = 'undercurl' },
    CocWarningHighlight { sp = hsl('#ffd7a7'), gui = 'undercurl' },
    CocInfoHighlight { sp = hsl('#8cb0d3'), gui = 'undercurl' },
    CocHintHighlight { CocInfoHighlight },
    CocErrorSign { fg = Error.fg },
    CocWarningSign { fg = hsl('#ffd7a7') },
    CocInfoSign { fg = hsl('#8cb0d3') },
    CocHintSign { CocInfoSign },
    CocUnderline { sp = Normal.fg, gui='underline' },
    HighlightedyankRegion { Warning },
    -- typescript
    typescriptObjectLabel { fg = Normal.fg },
    typescriptCall { fg = Normal.fg, gui = 'italic' },
    typescriptOperator { fg = Operator.fg, gui = 'bold' },
    typesciptTypeReference { Type },
    typescriptTypeParameter { Type },
    typescriptTypeReference { Type },
    typescriptTypeParameter { Type },
    typescriptArrowFunc { Statement },
    typescriptParens { Delimiter },
    typescriptBraces { Delimiter },
    typescriptArrowFuncArg { typescriptCall },
    typescriptTypeBrackets { Delimiter },
    typescriptDotNotation { Delimiter },
    typescriptTypeAnnotation { Delimiter },
    typescriptBinaryOp { typescriptOperator },
    typescriptTernaryOp { typescriptOperator },
    typescriptTypeQuery { typescriptOperator },
    typescriptMappedIn { typescriptOperator },
    typescriptAssign { typescriptOperator },
    typescriptUnaryOp { typescriptOperator },
    typescriptBracket { Delimiter },
    typescriptPredefinedType { Special },
    typescriptTypeArguments { Delimiter },
    typescriptInterfaceName { Type },
    typescriptClassName { Type },
    typescriptAliasDeclaration { Type },
    typescriptNull { Number },
    typescriptBoolean { Number },
    tsxIntrinsicTagName { Special },
    tsxTagName { Type },
    tsxTag { Delimiter },
    tsxCloseTag { Delimiter },
    tsxCloseString { Delimiter },
    tsxAttrib { Normal },
    tsxEqual { Delimiter },
    typescriptDocNotation { fg = SpecialComment.fg, gui = 'bold,italic' },
    typescriptDocTags { typescriptDocNotation },
    typescriptObjectColon { Delimiter },
    typescriptObjectSpread { Delimiter },
    -- jsx
    jsxTagName { Special },
    jsxComponentName { Type },
    jsxOpenPunct { Delimiter },
    jsxClosePunct { Delimiter },
    jsxCloseString { Delimiter },
    jsxAttrib { fg = Normal.fg, gui = 'italic' },
    jsxBraces { Delimiter },
    -- lua
    luaParen { Delimiter },
    luaTable { Delimiter },
    -- GitSigns
    GitSignsCurrentLineBlame { LineNr },
    GitSignsAdd { fg = DiffAdd.fg },
    GitSignsDelete { fg = DiffText.fg },
    GitSignsChange { fg = hsl('#8cb0d3') },
    -- IndentBlankline
    IndentBlanklineContextChar { fg = hsl('#bca3a3') }
  }
end)

return theme
